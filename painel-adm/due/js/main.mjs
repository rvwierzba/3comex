// Arquivo: due/js/main.mjs
// Versão final com checagem de status integrada e logs para nomeCliente

// --- Funções Auxiliares ---
const getSafe = (obj, path, defaultValue = '') => { try { const value = path.split('.').reduce((o, k) => (o || {})[k], obj); return value ?? defaultValue; } catch { return defaultValue; } };
const getXmlValue = (el, tag) => el?.getElementsByTagName(tag)?.[0]?.textContent?.trim() ?? '';
const getXmlAttr = (el, attr) => el?.getAttribute(attr) ?? '';
const htmlspecialchars = (str) => { if (typeof str !== 'string') return str; return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;'); };

// --- Variáveis Globais ---
let processedNFData = [];
let itemDetailsModalInstance = null;
let batchEditModalInstance = null;

// --- Definição de Campos Obrigatórios para Status DUE (Controla o ícone ✅/❌) ---
// (Conforme combinado, mantendo esta lista)
const requiredDueFields = [
    'ncm',                  // NCM
    'descricaoDetalhadaDue',// Descrição Detalhada para DU-E
    'unidadeEstatistica',   // Unidade Estatística (da NCM)
    'quantidadeEstatistica',// Quantidade na Unidade Estatística
    'pesoLiquidoItem',      // Peso Líquido do Item (Kg)
    'condicaoVenda',        // Incoterm (EXW, FOB, etc.)
    'vmcv',                 // Valor na Moeda de Comercialização/Cond. Venda
    'vmle',                 // Valor no Local de Embarque (R$)
    'paisDestino',          // Código do País de Destino Final (CodigoBACEN)
    'enquadramento1',       // Código do 1º Enquadramento da Operação
];
console.log("Status check fields:", requiredDueFields); // Log para confirmar campos checados

// --- Função para verificar se item está completo (para status ✅/❌) ---
function isItemDueComplete(item) {
    if (!item) return false;
    return requiredDueFields.every(fieldName => {
        const value = item[fieldName];
        let isFilled;
        if (Array.isArray(value)) { isFilled = value !== null && value !== undefined; }
        else if (typeof value === 'number') { isFilled = value !== null && value !== undefined && !isNaN(value); }
        else { isFilled = value !== null && value !== undefined && value.toString().trim() !== ''; }
        // if (!isFilled) console.log(`Item ${item.nItem} incompleto: Campo ${fieldName} vazio/inválido.`); // Log de debug opcional
        return isFilled;
    });
}

// --- Parser XML ---
const parseNFeXML = (xmlString, fileName = 'arquivo') => {
    // console.log(`[Parse XML] Iniciando para ${fileName}`); // Log menos verboso
    try { /* ... código mantido como antes ... */
        const parser = new DOMParser(); const xmlDoc = parser.parseFromString(xmlString, "text/xml"); const parserError = xmlDoc.getElementsByTagName("parsererror"); if (parserError.length > 0) { throw new Error(`Erro parse XML: ${parserError[0].textContent}`); } const infNFe = xmlDoc.getElementsByTagName("infNFe")[0]; if (!infNFe) { throw new Error(`<infNFe> não encontrada`); } const chave = getXmlAttr(infNFe, 'Id').replace('NFe', ''); const emit = infNFe.getElementsByTagName("emit")[0]; const dest = infNFe.getElementsByTagName("dest")[0]; const enderDest = dest?.getElementsByTagName("enderDest")[0]; const exporta = infNFe.getElementsByTagName("exporta")[0]; const infAdic = infNFe.getElementsByTagName("infAdic")[0]; const detElements = infNFe.getElementsByTagName("det"); const nfeData = { chaveAcesso: chave, emitente: { cnpj: getXmlValue(emit, "CNPJ"), nome: getXmlValue(emit, "xNome") }, destinatario: { nome: getXmlValue(dest, "xNome"), idEstrangeiro: getXmlValue(dest, "idEstrangeiro"), endereco: { logradouro: getXmlValue(enderDest, "xLgr"), numero: getXmlValue(enderDest, "nro"), bairro: getXmlValue(enderDest, "xBairro"), municipio: getXmlValue(enderDest, "xMun"), uf: getXmlValue(enderDest, "UF"), paisNome: getXmlValue(enderDest, "xPais"), paisCodigo: getXmlValue(enderDest, "cPais") } }, exportacao: { ufSaidaPais: getXmlValue(exporta, "UFSaidaPais"), localExportacao: getXmlValue(exporta, "xLocExporta") }, infAdicional: { infCpl: getXmlValue(infAdic, "infCpl"), infAdFisco: getXmlValue(infAdic, "infAdFisco") }, items: [] }; for (let i = 0; i < detElements.length; i++) { const det = detElements[i]; const prod = det.getElementsByTagName("prod")[0]; if (!prod) { console.warn(`[Parse Item ${i+1}] <prod> não encontrada.`); continue; } const nItem = getXmlAttr(det, 'nItem') || (i + 1).toString(); const xProdValue = getXmlValue(prod, "xProd"); const qComValue = getXmlValue(prod, "qCom"); const vUnComValue = getXmlValue(prod, "vUnCom"); const vProdValue = getXmlValue(prod, "vProd"); const qTribValue = getXmlValue(prod, "qTrib"); let pesoLiquidoXml = getXmlValue(prod, "pesoL") || getXmlValue(prod, "PESOL") || getXmlValue(prod, "PesoLiquido"); const qCom = parseFloat(qComValue) || 0; const vUnCom = parseFloat(vUnComValue) || 0; const vProd = parseFloat(vProdValue) || 0; const qTrib = parseFloat(qTribValue) || null; const pesoL = pesoLiquidoXml ? parseFloat(pesoLiquidoXml.replace(',', '.')) : null; const pesoLiquidoItem = isNaN(pesoL) ? null : pesoL; const paisDestinoInicial = getSafe(nfeData, 'destinatario.endereco.paisCodigo', null); nfeData.items.push({ nItem: nItem, cProd: getXmlValue(prod, "cProd"), xProd: xProdValue, ncm: getXmlValue(prod, "NCM"), cfop: getXmlValue(prod, "CFOP"), uCom: getXmlValue(prod, "uCom"), qCom: qCom, vUnCom: vUnCom, vProd: vProd, uTrib: getXmlValue(prod, "uTrib"), qTrib: qTrib, infAdProd: getXmlValue(det, "infAdProd"), descricaoNcm: "", atributosNcm: "", unidadeEstatistica: getXmlValue(prod, "uTrib"), quantidadeEstatistica: qTrib, pesoLiquidoItem: pesoLiquidoItem, condicaoVenda: "", vmcv: null, vmle: vProd, paisDestino: paisDestinoInicial, descricaoDetalhadaDue: xProdValue, enquadramento1: "", enquadramento2: "", enquadramento3: "", enquadramento4: "", lpcos: [], nfsRefEletronicas: [], nfsRefFormulario: [], nfsComplementares: [], ccptCcrom: "" }); } /*console.log(`[Parse XML] ${fileName} OK - ${nfeData.items.length} itens.`);*/ return nfeData;
    } catch (error) { /* ... (código mantido como antes) ... */ console.error(`Erro GERAL Parse XML ${fileName}:`, error); const uploadStatusEl = document.getElementById('uploadStatus'); if (uploadStatusEl) { uploadStatusEl.innerHTML += `<div class="text-danger small"><i class="bi bi-x-octagon-fill me-1"></i>Falha processar ${htmlspecialchars(fileName)}: ${htmlspecialchars(error.message)}</div>`; } return null; } };

// --- Função para Criar os Campos do Modal Detalhado ---
function createItemDetailsFields(itemData, nfData, nfIndex, itemIndex) { /* ... (código mantido como antes) ... */
    const container = document.createElement('div'); container.classList.add('item-details-form-container'); const idPrefix = `modal-item-${nfIndex}-${itemIndex}-`; const val = (key, defaultValue = '') => getSafe(itemData, key, defaultValue); const isSelected = (value, targetValue) => (value !== null && targetValue !== null && value == targetValue) ? 'selected' : ''; const isChecked = (value, targetValue) => value === targetValue ? 'checked' : ''; const createOptions = (data, valueKey, textKey, selectedValue, includeEmpty = true, dataAttrKey = null, dataAttrValueKey = null) => { let optionsHtml = includeEmpty ? '<option value="">Selecione...</option>' : ''; if (data?.length) { optionsHtml += data.map(item => { const itemValue = getSafe(item, valueKey); const itemText = getSafe(item, textKey); let dataAttrHtml = ''; if (dataAttrKey && dataAttrValueKey && item[dataAttrValueKey]) { dataAttrHtml = ` data-${htmlspecialchars(dataAttrKey)}="${htmlspecialchars(getSafe(item, dataAttrValueKey))}"`; } const selectedAttr = isSelected(selectedValue, itemValue); return `<option value="${htmlspecialchars(itemValue)}" ${selectedAttr}${dataAttrHtml}>${htmlspecialchars(itemText)}</option>`; }).join(''); } return optionsHtml; }; const enqOptions = (num) => { let html = '<option value="">Selecione...</option>'; const enqData = window.enquadramentosData || []; const currentVal = val(`enquadramento${num}`); if (Array.isArray(enqData)) { html += enqData.map(enq => `<option value="${htmlspecialchars(enq.CODIGO)}" ${isSelected(currentVal, enq.CODIGO)}>${htmlspecialchars(enq.CODIGO)} - ${htmlspecialchars(enq.DESCRICAO)}</option>`).join(''); } html += `<option value="99999" ${isSelected(currentVal, '99999')}>99999 - OPERACAO SEM ENQUADRAMENTO</option>`; return html; }; const enqSelectHTML = (num) => `<select id="${idPrefix}enquadramento${num}" name="enquadramento${num}" class="form-select form-select-sm">${enqOptions(num)}</select>`; const incotermTextMap = (window.incotermsData || []).map(i => ({ ...i, DisplayText: `${getSafe(i, 'Sigla')} - ${getSafe(i, 'Descricao')}` })); const incotermOptionsHTML = createOptions(incotermTextMap, 'Sigla', 'DisplayText', val('condicaoVenda')); const paisOptionsHTML = createOptions(window.paisesData || [], 'CodigoBACEN', 'Nome', val('paisDestino')); container.innerHTML = ` <h5 class="mb-3 border-bottom pb-2">Item ${htmlspecialchars(val('nItem', itemIndex + 1))} (NF-e: ...${htmlspecialchars(getSafe(nfData, 'chaveAcesso', 'N/A').slice(-6))})</h5> <h6>Dados Básicos e NCM</h6> <div class="row g-3 mb-4"> <div class="col-md-6"> <label class="form-label">Exportador:</label> <input type="text" class="form-control form-control-sm bg-light" value="${htmlspecialchars(getSafe(nfData, 'emitente.nome', 'N/A'))}" readonly> </div> <div class="col-md-6"> <label for="${idPrefix}ncm" class="form-label">NCM:</label> <input type="text" id="${idPrefix}ncm" name="ncm" class="form-control form-control-sm" value="${htmlspecialchars(val('ncm'))}" required> </div> <div class="col-md-6"> <label for="${idPrefix}descricao_ncm" class="form-label">Descrição NCM:</label> <input type="text" id="${idPrefix}descricao_ncm" name="descricaoNcm" class="form-control form-control-sm" value="${htmlspecialchars(val('descricaoNcm'))}" placeholder="Consultar externamente se necessário"> </div> <div class="col-md-6"> <label for="${idPrefix}atributos_ncm" class="form-label">Atributos NCM:</label> <input type="text" id="${idPrefix}atributos_ncm" name="atributosNcm" class="form-control form-control-sm" value="${htmlspecialchars(val('atributosNcm'))}" placeholder="Consultar/definir atributos"> </div> </div><h6>Descrição da Mercadoria</h6> <div class="mb-3"> <label for="${idPrefix}descricao_mercadoria" class="form-label">Descrição Conforme NF-e:</label> <textarea id="${idPrefix}descricao_mercadoria" class="form-control form-control-sm bg-light" rows="2" readonly>${htmlspecialchars(val('xProd'))}</textarea> </div> <div class="mb-3"> <label for="${idPrefix}descricao_complementar" class="form-label">Descrição Complementar (NF-e - infAdProd):</label> <textarea id="${idPrefix}descricao_complementar" name="infAdProd" class="form-control form-control-sm" rows="2">${htmlspecialchars(val('infAdProd'))}</textarea> </div> <div class="mb-4"> <label for="${idPrefix}descricao_detalhada_due" class="form-label">Descrição Detalhada para DU-E:</label> <textarea id="${idPrefix}descricao_detalhada_due" name="descricaoDetalhadaDue" class="form-control form-control-sm" rows="4" placeholder="Descrição completa e detalhada exigida para a DU-E" required>${htmlspecialchars(val('descricaoDetalhadaDue'))}</textarea> </div><h6>Quantidades e Valores</h6> <div class="row g-3 mb-4"> <div class="col-md-4"> <label for="${idPrefix}unidade_estatistica" class="form-label">Unid. Estatística (NCM):</label> <input type="text" id="${idPrefix}unidade_estatistica" name="unidadeEstatistica" class="form-control form-control-sm" value="${htmlspecialchars(val('unidadeEstatistica'))}" placeholder="Unid. conforme NCM" required> </div> <div class="col-md-4"> <label for="${idPrefix}quantidade_estatistica" class="form-label">Qtd. Estatística:</label> <input type="number" step="any" id="${idPrefix}quantidade_estatistica" name="quantidadeEstatistica" class="form-control form-control-sm" value="${htmlspecialchars(val('quantidadeEstatistica', ''))}" required> </div> <div class="col-md-4"> <label for="${idPrefix}peso_liquido" class="form-label">Peso Líquido Total Item (KG):</label> <input type="number" step="any" id="${idPrefix}peso_liquido" name="pesoLiquidoItem" class="form-control form-control-sm" value="${htmlspecialchars(val('pesoLiquidoItem', ''))}" required> </div> <div class="col-md-3"> <label for="${idPrefix}unidade_comercializada" class="form-label">Unid. Comercial.:</label> <input type="text" id="${idPrefix}unidade_comercializada" class="form-control form-control-sm bg-light" value="${htmlspecialchars(val('uCom'))}" readonly> </div> <div class="col-md-3"> <label for="${idPrefix}quantidade_comercializada" class="form-label">Qtd. Comercial.:</label> <input type="number" step="any" id="${idPrefix}quantidade_comercializada" class="form-control form-control-sm bg-light" value="${htmlspecialchars(val('qCom'))}" readonly> </div> <div class="col-md-3"> <label for="${idPrefix}valor_unit_comercial" class="form-label">Vlr Unit. Com. (R$):</label> <input type="number" step="any" id="${idPrefix}valor_unit_comercial" class="form-control form-control-sm bg-light" value="${htmlspecialchars(val('vUnCom'))}" readonly> </div> <div class="col-md-3"> <label class="form-label">Vlr Total Item (R$):</label> <input type="number" step="any" class="form-control form-control-sm bg-light" value="${htmlspecialchars(val('vProd'))}" readonly> </div> <div class="col-md-4"> <label for="${idPrefix}condicao_venda" class="form-label">Condição Venda (Incoterm):</label> <select id="${idPrefix}condicao_venda" name="condicaoVenda" class="form-select form-select-sm" required> ${incotermOptionsHTML} </select> </div> <div class="col-md-4"> <label for="${idPrefix}vmle" class="form-label">VMLE (R$):</label> <input type="number" step="any" id="${idPrefix}vmle" name="vmle" class="form-control form-control-sm" value="${htmlspecialchars(val('vmle', ''))}" title="Valor da Mercadoria no Local de Embarque" required> </div> <div class="col-md-4"> <label for="${idPrefix}vmcv" class="form-label">VMCV (Moeda Negoc.):</label> <input type="number" step="any" id="${idPrefix}vmcv" name="vmcv" class="form-control form-control-sm" value="${htmlspecialchars(val('vmcv', ''))}" title="Valor da Mercadoria na Condição de Venda (na moeda de negociação)" required> </div> </div><h6>Importador e Destino</h6> <div class="row g-3 mb-4"> <div class="col-md-6"> <label class="form-label">Nome Importador (NF-e):</label> <input type="text" class="form-control form-control-sm bg-light" value="${htmlspecialchars(getSafe(nfData, 'destinatario.nome', 'N/A'))}" readonly> </div> <div class="col-md-6"> <label class="form-label">País Importador (NF-e):</label> <input type="text" class="form-control form-control-sm bg-light" value="${htmlspecialchars(getSafe(nfData, 'destinatario.endereco.paisNome', 'N/A'))} (${htmlspecialchars(getSafe(nfData, 'destinatario.endereco.paisCodigo', 'N/A'))})" readonly> </div> <div class="col-12"> <label class="form-label">Endereço Importador (NF-e):</label> <input type="text" class="form-control form-control-sm bg-light" value="${htmlspecialchars([getSafe(nfData, 'destinatario.endereco.logradouro'), getSafe(nfData, 'destinatario.endereco.numero'), getSafe(nfData, 'destinatario.endereco.bairro'), getSafe(nfData, 'destinatario.endereco.municipio'), getSafe(nfData, 'destinatario.endereco.uf')].filter(Boolean).join(', ') || '(Não informado na NF-e)')}" readonly> </div> <div class="col-md-6"> <label for="${idPrefix}pais_destino" class="form-label">País Destino Final (DU-E):</label> <select id="${idPrefix}pais_destino" name="paisDestino" class="form-select form-select-sm" required> ${paisOptionsHTML} </select> </div> </div><h6>Enquadramentos da Operação</h6> <div class="row g-3 mb-4"> ${[1, 2, 3, 4].map(num => `<div class="col-md-6"> <label for="${idPrefix}enquadramento${num}" class="form-label">${num}º Enquadramento:</label> ${enqSelectHTML(num)} </div>`).join('')} <small class="text-muted">O 1º enquadramento é obrigatório.</small> </div><h6>LPCO (Licenças, Permissões, Certificados e Outros)</h6> <div class="lpco-container mb-4 list-manager-section" id="${idPrefix}lpco-section"> <div class="input-group input-group-sm"> <input type="text" class="form-control list-item-input" placeholder="Digite o número do LPCO"> <button type="button" class="btn btn-success add-list-item-btn">Adicionar</button> </div> <div class="mt-2"> <label class="form-label small text-muted">LPCOs Adicionados:</label> <div class="border p-2 rounded bg-light list-display min-h-40px"> ${(val('lpcos', []) || []).map(lpco => `<span class="badge bg-secondary me-1 mb-1 list-item" data-value="${htmlspecialchars(lpco)}">${htmlspecialchars(lpco)} <button type="button" class="btn-close btn-close-white btn-sm remove-list-item" aria-label="Remover"></button></span>`).join('')} </div> <input type="hidden" name="lpcos" value="${htmlspecialchars((val('lpcos', []) || []).join(','))}"> </div> </div><h6>Referências e Tratamento Tributário</h6> <div class="row g-3"> <div class="col-md-7"> <div class="border p-3 rounded mb-3 list-manager-section" id="${idPrefix}nfe-ref-section"> <label class="form-label fw-bold small mb-1">NF-e Referenciada</label> <div class="input-group input-group-sm mb-2"> <input type="text" class="form-control list-item-input" placeholder="Chave de Acesso (44 dígitos)"> <button class="btn btn-outline-secondary add-list-item-btn" type="button">Add</button> </div> <ul class="list-group list-group-flush list-display small ps-1"> ${(val('nfsRefEletronicas', []) || []).map(k => `<li class="list-group-item py-1 px-0 d-flex justify-content-between align-items-center list-item" data-value="${htmlspecialchars(k)}">${htmlspecialchars(k)}<button type="button" class="btn-close btn-sm remove-list-item" aria-label="Remover"></button></li>`).join('')} </ul> <input type="hidden" name="nfsRefEletronicas" value="${htmlspecialchars((val('nfsRefEletronicas', []) || []).join(','))}"> </div> <div class="border p-3 rounded mb-3 list-manager-section" id="${idPrefix}nf_form-ref-section"> <label class="form-label fw-bold small mb-1">NF Formulário Referenciada</label> <div class="input-group input-group-sm mb-2"> <input type="text" class="form-control list-item-input" placeholder="Série, Número, Modelo, etc."> <button class="btn btn-outline-secondary add-list-item-btn" type="button">Add</button> </div> <ul class="list-group list-group-flush list-display small ps-1"> ${(val('nfsRefFormulario', []) || []).map(d => `<li class="list-group-item py-1 px-0 d-flex justify-content-between align-items-center list-item" data-value="${htmlspecialchars(d)}">${htmlspecialchars(d)}<button type="button" class="btn-close btn-sm remove-list-item" aria-label="Remover"></button></li>`).join('')} </ul> <input type="hidden" name="nfsRefFormulario" value="${htmlspecialchars((val('nfsRefFormulario', []) || []).join(','))}"> </div> <div class="border p-3 rounded mb-3 mb-md-0 list-manager-section" id="${idPrefix}nfc-ref-section"> <label class="form-label fw-bold small mb-1">NF Complementar</label> <div class="input-group input-group-sm mb-2"> <input type="text" class="form-control list-item-input" placeholder="Chave de Acesso (44 dígitos)"> <button class="btn btn-outline-secondary add-list-item-btn" type="button">Add</button> </div> <ul class="list-group list-group-flush list-display small ps-1"> ${(val('nfsComplementares', []) || []).map(k => `<li class="list-group-item py-1 px-0 d-flex justify-content-between align-items-center list-item" data-value="${htmlspecialchars(k)}">${htmlspecialchars(k)}<button type="button" class="btn-close btn-sm remove-list-item" aria-label="Remover"></button></li>`).join('')} </ul> <input type="hidden" name="nfsComplementares" value="${htmlspecialchars((val('nfsComplementares', []) || []).join(','))}"> </div> </div> <div class="col-md-5"> <div class="border p-3 rounded h-100"> <h6 class="mb-3">Acordo Mercosul</h6> <div class="form-check mb-2"> <input class="form-check-input" type="radio" name="ccptCcrom" id="${idPrefix}ccpt_ccrom_none" value="" ${isChecked(val('ccptCcrom'), '')}> <label class="form-check-label small" for="${idPrefix}ccpt_ccrom_none">N/A (Não se aplica)</label> </div> <div class="form-check mb-2"> <input class="form-check-input" type="radio" name="ccptCcrom" id="${idPrefix}ccpt" value="CCPT" ${isChecked(val('ccptCcrom'), 'CCPT')}> <label class="form-check-label small" for="${idPrefix}ccpt">CCPT</label> </div> <div class="form-check"> <input class="form-check-input" type="radio" name="ccptCcrom" id="${idPrefix}ccrom" value="CCROM" ${isChecked(val('ccptCcrom'), 'CCROM')}> <label class="form-check-label small" for="${idPrefix}ccrom">CCROM</label> </div> </div> </div> </div> `;
    const setupListManager = (sectionElement) => { /* ... (código mantido como antes) ... */ const addButton = sectionElement.querySelector('.add-list-item-btn'); const inputField = sectionElement.querySelector('.list-item-input'); const displayArea = sectionElement.querySelector('.list-display'); const hiddenInput = sectionElement.querySelector('input[type="hidden"]'); const updateHiddenInput = () => { if (!displayArea || !hiddenInput) return; const items = Array.from(displayArea.querySelectorAll('.list-item')).map(item => item.dataset.value); hiddenInput.value = items.join(','); }; const addRemoveListener = (button) => { button.addEventListener('click', (e) => { e.target.closest('.list-item').remove(); updateHiddenInput(); }); }; if (addButton && inputField && displayArea && hiddenInput) { addButton.addEventListener('click', () => { const value = inputField.value.trim(); if (value) { const exists = Array.from(displayArea.querySelectorAll('.list-item')).some(item => item.dataset.value === value); if (exists) { alert('Item já adicionado.'); return; } let newItemElement; if (displayArea.tagName === 'UL') { newItemElement = document.createElement('li'); newItemElement.className = 'list-group-item py-1 px-0 d-flex justify-content-between align-items-center list-item'; newItemElement.innerHTML = `${htmlspecialchars(value)}<button type="button" class="btn-close btn-sm remove-list-item" aria-label="Remover"></button>`; } else { newItemElement = document.createElement('span'); newItemElement.className = 'badge bg-secondary me-1 mb-1 list-item'; newItemElement.innerHTML = `${htmlspecialchars(value)} <button type="button" class="btn-close btn-close-white btn-sm remove-list-item" aria-label="Remover"></button>`; } newItemElement.dataset.value = value; addRemoveListener(newItemElement.querySelector('.remove-list-item')); displayArea.appendChild(newItemElement); inputField.value = ''; updateHiddenInput(); } else { alert("Digite um valor."); } }); } displayArea.querySelectorAll('.remove-list-item').forEach(addRemoveListener); };
    container.querySelectorAll('.list-manager-section, .lpco-container').forEach(setupListManager); return container;
}

// --- Renderização da Tabela de Itens ---
function renderNotasFiscaisTable() { /* ... (código mantido como antes) ... */
    const tbody = document.querySelector('#notasFiscaisTable tbody'); const theadRow = document.querySelector('#notasFiscaisTable thead tr'); const batchButton = document.getElementById('batchEditButton'); if (!tbody || !theadRow) { console.error("Tabela #notasFiscaisTable não encontrada."); return; } tbody.innerHTML = ''; let statusHeader = theadRow.querySelector('.status-header'); if (!statusHeader) { statusHeader = document.createElement('th'); statusHeader.textContent = 'Status DUE'; statusHeader.classList.add('status-header'); statusHeader.style.width = '80px'; statusHeader.style.textAlign = 'center'; theadRow.appendChild(statusHeader); } else if (statusHeader !== theadRow.lastElementChild) { theadRow.appendChild(statusHeader); } const colCount = theadRow.cells.length; let hasItems = false; let totalItemsRendered = 0; if (processedNFData.length === 0) { tbody.innerHTML = `<tr><td colspan="${colCount}" class="text-center text-muted fst-italic">Carregue XML...</td></tr>`; if (batchButton) batchButton.disabled = true; return; } processedNFData.forEach((nfEntry, nfIndex) => { if (!nfEntry?.nf?.items?.length) return; const nf = nfEntry.nf; const items = nfEntry.items; const chaveNFeShort = getSafe(nf, 'chaveAcesso', 'N/A').slice(-9); const nomeDest = getSafe(nf, 'destinatario.nome', 'N/A'); const paisDestCodXml = getSafe(nf, 'destinatario.endereco.paisCodigo', null); let paisDestNome = getSafe(nf, 'destinatario.endereco.paisNome', 'N/A'); if ((!paisDestNome || paisDestNome === 'N/A') && paisDestCodXml && window.paisesData) { const paisEncontrado = window.paisesData.find(p => p.CodigoBACEN == paisDestCodXml); if (paisEncontrado) paisDestNome = paisEncontrado.Nome; else if (paisDestCodXml) paisDestNome = `Código ${paisDestCodXml}`; } items.forEach((item, itemIndex) => { if (!item) return; hasItems = true; totalItemsRendered++; const row = document.createElement('tr'); row.classList.add('item-row'); row.dataset.nfIndex = nfIndex; row.dataset.itemIndex = itemIndex; row.innerHTML = `<td>...${htmlspecialchars(chaveNFeShort)}</td><td class="text-center">${htmlspecialchars(getSafe(item, 'nItem', itemIndex + 1))}</td><td>${htmlspecialchars(getSafe(item, 'ncm', 'N/A'))}</td><td>${htmlspecialchars(getSafe(item, 'xProd', 'N/A'))}</td><td>${htmlspecialchars(nomeDest)}</td><td>${htmlspecialchars(paisDestNome)}</td>`; const actionsCell = document.createElement('td'); actionsCell.classList.add('text-center'); const toggleBtn = document.createElement('button'); toggleBtn.type = 'button'; toggleBtn.classList.add('btn', 'toggle-details'); toggleBtn.title = `Detalhes Item ${htmlspecialchars(getSafe(item, 'nItem', itemIndex + 1))}`; toggleBtn.dataset.nfIndex = nfIndex; toggleBtn.dataset.itemIndex = itemIndex; toggleBtn.innerHTML = '+'; actionsCell.appendChild(toggleBtn); row.appendChild(actionsCell); const statusCell = document.createElement('td'); const completo = isItemDueComplete(item); statusCell.style.textAlign = 'center'; statusCell.style.verticalAlign = 'middle'; statusCell.innerHTML = completo ? '<span style="color: green; font-size: 1.2em; font-weight: bold;" title="Completo">&#x2705;</span>' : '<span style="color: red; font-size: 1.2em; font-weight: bold;" title="Incompleto">&#x274C;</span>'; row.appendChild(statusCell); tbody.appendChild(row); }); }); if (!hasItems && processedNFData.length > 0) { tbody.innerHTML = `<tr><td colspan="${colCount}" class="text-center text-warning fst-italic">Nenhum item válido.</td></tr>`; if (batchButton) batchButton.disabled = true; } else if (hasItems) { if (batchButton) batchButton.disabled = false; } else { tbody.innerHTML = `<tr><td colspan="${colCount}" class="text-center text-muted fst-italic">Carregue XML...</td></tr>`; if (batchButton) batchButton.disabled = true; }
}

// --- Preencher Campos da Aba 1 ---
const populateMainForm = (nfData) => { /* ... (código mantido como antes, com log de debug) ... */
    const formElements = { cnpjCpf: document.getElementById('text-cnpj-cpf-select'), nomeCliente: document.getElementById('nomeCliente'), infoCompl: document.getElementById('info-compl'), moeda: document.getElementById('text-moeda'), ruc: document.getElementById('ruc'), situacaoEspec: document.getElementById('situacao-espec-despacho'), unidadeRfbD: document.getElementById('text-campo-de-pesquisa-unidades-rfb-d'), recintoD: document.getElementById('text-campo-de-pesquisa-recinto-alfandegado-d'), unidadeRfbE: document.getElementById('text-campo-de-pesquisa-unidades-rfb-e'), recintoE: document.getElementById('text-campo-de-pesquisa-recinto-alfandegado-e'), viaEspecial: document.getElementById('via-especial-transport'), exportCons: document.getElementById('export-cons'), radioContaPropria: document.getElementById('por-conta-propria'), radioNfe: document.getElementById('nfe') };
    if (nfData) { if (formElements.cnpjCpf) formElements.cnpjCpf.value = getSafe(nfData, 'emitente.cnpj', ''); if (formElements.nomeCliente) { formElements.nomeCliente.value = getSafe(nfData, 'emitente.nome', ''); console.log(`DEBUG JS (populate): Valor definido para #nomeCliente: '${formElements.nomeCliente.value}'`); } if (formElements.infoCompl && !formElements.infoCompl.value.trim()) { formElements.infoCompl.value = getSafe(nfData, 'infAdicional.infCpl', ''); } } else { Object.values(formElements).forEach(el => { if (el) { if (el.type === 'checkbox' || el.type === 'radio') { if (el.id !== 'por-conta-propria' && el.id !== 'nfe') { el.checked = false; } } else if (el.tagName === 'SELECT') { el.value = ''; } else { el.value = ''; } } }); if(formElements.radioContaPropria) formElements.radioContaPropria.checked = true; if(formElements.radioNfe) formElements.radioNfe.checked = true; console.log(`[Aba 1] Formulário limpo.`); }
};

// --- Código Principal (Inicialização e Listeners) ---
document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM Carregado. Iniciando script main.mjs.");

    // --- Referências UI ---
    const inputXML = document.getElementById('xml-files'); const uploadStatus = document.getElementById('uploadStatus'); const spinner = document.getElementById('spinner'); const notasTable = document.querySelector('#notasFiscaisTable'); const itemDetailsModalElement = document.getElementById('itemDetailsModal'); const saveItemButtonModal = document.getElementById('saveItemDetails'); const batchEditButton = document.getElementById('batchEditButton'); const batchEditModalElement = document.getElementById('batchEditModal'); const saveBatchButton = document.getElementById('saveBatchEdit'); const mainForm = document.getElementById('dueForm'); const salvarDueButton = document.getElementById('salvarDUE'); const enviarDueButton = document.getElementById('enviarDUE'); const dueIdHiddenInput = document.getElementById('due_id_hidden');

    // --- Verificação Elementos Essenciais ---
    const essentialElements = { inputXML, uploadStatus, spinner, notasTable, itemDetailsModalElement, saveItemButtonModal, batchEditButton, batchEditModalElement, saveBatchButton, mainForm, salvarDueButton, enviarDueButton, dueIdHiddenInput };
    let missingElement = false; for (const key in essentialElements) { if (!essentialElements[key]) { console.error(`ERRO FATAL: Elemento UI não encontrado: ${key}`); missingElement = true; } } if (missingElement) { alert("Erro crítico inicialização. Ver console (F12)."); if (salvarDueButton) salvarDueButton.disabled = true; if (enviarDueButton) enviarDueButton.disabled = true; return; } console.log("Elementos UI OK.");

    // --- Inicializar Modais ---
    try { /* ... (código mantido como antes) ... */
        if (window.bootstrap?.Modal) { itemDetailsModalInstance = new bootstrap.Modal(itemDetailsModalElement); batchEditModalInstance = new bootstrap.Modal(batchEditModalElement); itemDetailsModalElement.addEventListener('hidden.bs.modal', () => { if (saveItemButtonModal) { delete saveItemButtonModal.dataset.nfIndex; delete saveItemButtonModal.dataset.itemIndex; } const mb = itemDetailsModalElement.querySelector('.modal-body'); if (mb) mb.innerHTML = '<div class="text-center p-5">...</div>'; }); batchEditModalElement.addEventListener('hidden.bs.modal', () => { const bf = document.getElementById('batchEditForm'); if (bf) { bf.reset(); const ra = bf.querySelector('#batchCcptCcromAlterar'); if(ra) ra.checked = true; } }); console.log("Modais OK."); } else { throw new Error("Bootstrap Modal não encontrado."); }
    } catch (e) { console.error("Falha modais:", e); alert("Erro inicializar Modais."); if (batchEditButton) batchEditButton.disabled = true; }

    // --- Renderizar Tabela Inicial ---
    renderNotasFiscaisTable();

    // --- Listener Input XML ---
    inputXML.addEventListener('change', async (event) => { /* ... (código mantido como antes) ... */
        const files = event.target.files; if (!files?.length) { uploadStatus.textContent = 'Nenhum selecionado.'; processedNFData = []; renderNotasFiscaisTable(); populateMainForm(null); if (dueIdHiddenInput) dueIdHiddenInput.value = ''; if (enviarDueButton) enviarDueButton.disabled = true; if (salvarDueButton) salvarDueButton.disabled = true; if (batchEditButton) batchEditButton.disabled = true; return; }
        uploadStatus.innerHTML = `<div class="d-flex align-items-center"><div class="spinner-grow spinner-grow-sm me-2"></div> <span>Processando ${files.length}...</span></div>`; spinner.style.display = 'block'; inputXML.disabled = true; salvarDueButton.disabled = true; enviarDueButton.disabled = true; batchEditButton.disabled = true;
        processedNFData = []; let promises = []; let errorCount = 0; let warningCount = 0; let statusMessagesHTML = '';
        for (const file of files) { if (file.name.toLowerCase().endsWith('.xml') && (file.type === 'text/xml' || file.type === 'application/xml' || file.type === '')) { promises.push( file.text().then(xml => { const data = parseNFeXML(xml, file.name); if (data?.items?.length > 0) { processedNFData.push({ nf: data, items: data.items }); statusMessagesHTML += `<div class="text-success small"><i class="bi bi-check-circle-fill me-1"></i>${htmlspecialchars(file.name)}: OK (${data.items.length})</div>`; } else if (data) { statusMessagesHTML += `<div class="text-warning small"><i class="bi bi-exclamation-triangle-fill me-1"></i>${htmlspecialchars(file.name)}: Sem itens.</div>`; warningCount++; } else { errorCount++; } }).catch(err => { console.error(`Erro LER ${file.name}:`, err); statusMessagesHTML += `<div class="text-danger small"><i class="bi bi-x-octagon-fill me-1"></i>Falha LER ${htmlspecialchars(file.name)}.</div>`; errorCount++; }) ); } else { statusMessagesHTML += `<div class="text-secondary small"><i class="bi bi-slash-circle-fill me-1"></i>${htmlspecialchars(file.name)}: Ignorado.</div>`; warningCount++; } }
        try { await Promise.all(promises); } catch (err) { console.error("Erro GERAL async:", err); statusMessagesHTML += `<div class="text-danger">Erro inesperado.</div>`; errorCount++; } finally { spinner.style.display = 'none'; inputXML.disabled = false; event.target.value = null; if (dueIdHiddenInput) { dueIdHiddenInput.value = ''; } const totalItems = processedNFData.reduce((sum, entry) => sum + (entry.items?.length || 0), 0); const totalNFs = processedNFData.length; uploadStatus.innerHTML = statusMessagesHTML; if (totalItems > 0) { populateMainForm(processedNFData[0]?.nf); uploadStatus.insertAdjacentHTML('beforeend', `<hr class="my-1"><div class="text-primary fw-bold small">Total: ${totalItems} item(ns) em ${totalNFs}.</div>`); if (errorCount > 0) uploadStatus.insertAdjacentHTML('beforeend', `<div class="text-danger small">(${errorCount} erro(s))</div>`); salvarDueButton.disabled = false; console.log("[Input XML] HABILITANDO botão Salvar..."); enviarDueButton.disabled = true; batchEditButton.disabled = false; } else { populateMainForm(null); if (errorCount > 0) { uploadStatus.insertAdjacentHTML('beforeend', `<hr class="my-1"><div class="text-danger fw-bold small">Falha. Nenhum item.</div>`); } else { uploadStatus.insertAdjacentHTML('beforeend', `<hr class="my-1"><div class="text-warning small">Nenhum item válido.</div>`); } salvarDueButton.disabled = true; console.log("[Input XML] DESABILITANDO botão Salvar (sem itens)."); enviarDueButton.disabled = true; batchEditButton.disabled = true; } renderNotasFiscaisTable(); }
    });

    // --- Listener Abrir Modal Item ---
    notasTable.addEventListener('click', (e) => { /* ... (código mantido como antes) ... */
        const detailsButton = e.target.closest('button.toggle-details'); if (!detailsButton) return; const nfIndex = parseInt(detailsButton.dataset.nfIndex, 10); const itemIndex = parseInt(detailsButton.dataset.itemIndex, 10); if (isNaN(nfIndex) || isNaN(itemIndex) || !processedNFData[nfIndex]?.items?.[itemIndex]) { console.error("Índices/dados inválidos modal:", nfIndex, itemIndex); alert("Erro: Dados item não encontrados."); return; } try { const nfData = processedNFData[nfIndex].nf; const itemData = processedNFData[nfIndex].items[itemIndex]; const modalBody = itemDetailsModalElement.querySelector('.modal-body'); const modalTitle = itemDetailsModalElement.querySelector('.modal-title'); if (!modalBody || !modalTitle || !itemDetailsModalInstance || !saveItemButtonModal) { console.error("Modal elems?"); alert("Erro interno modal."); return; } modalTitle.textContent = `Detalhes Item ${htmlspecialchars(getSafe(itemData, 'nItem', itemIndex + 1))} (NF: ...${htmlspecialchars(getSafe(nfData, 'chaveAcesso', 'N/A').slice(-6))})`; modalBody.innerHTML = '<div class="text-center p-5"><div class="spinner-border text-primary"></div></div>'; saveItemButtonModal.dataset.nfIndex = nfIndex; saveItemButtonModal.dataset.itemIndex = itemIndex; setTimeout(() => { try { modalBody.innerHTML = ''; modalBody.appendChild(createItemDetailsFields(itemData, nfData, nfIndex, itemIndex)); itemDetailsModalInstance.show(); } catch (renderErr) { console.error("Erro renderizar modal:", renderErr); modalBody.innerHTML = `<div class="alert alert-danger">Erro carregar detalhes.</div>`; if (!itemDetailsModalInstance._isShown) itemDetailsModalInstance.show(); } }, 50); } catch (err) { console.error("Erro geral abrir modal:", err); alert(`Erro abrir detalhes: ${err.message}`); }
    });

    // --- Listener Salvar Modal Item ---
    saveItemButtonModal.addEventListener('click', () => { /* ... (código mantido como antes) ... */
        const nfIndex = parseInt(saveItemButtonModal.dataset.nfIndex, 10); const itemIndex = parseInt(saveItemButtonModal.dataset.itemIndex, 10); if (isNaN(nfIndex) || isNaN(itemIndex) || !processedNFData[nfIndex]?.items?.[itemIndex]) { alert("Erro salvar item."); return; } const itemDataRef = processedNFData[nfIndex].items[itemIndex]; const idPrefix = `modal-item-${nfIndex}-${itemIndex}-`; const modalContent = itemDetailsModalElement.querySelector('.modal-body .item-details-form-container'); if (!modalContent) { return; } try { const getModalValue = (fieldIdSuffix, convertToNumber = false, isFloat = true) => { const el = modalContent.querySelector(`#${idPrefix}${fieldIdSuffix}`); let value = el?.value ?? null; if (value !== null) { value = value.trim(); if (convertToNumber) { if (value === '') { value = null; } else { const cleanValue = value.replace(',', '.'); const num = isFloat ? parseFloat(cleanValue) : parseInt(cleanValue, 10); value = isNaN(num) ? null : num; } } } return value; }; const getModalRadioValue = (radioName) => { const el = modalContent.querySelector(`input[name="${radioName}"]:checked`); return el?.value ?? ""; }; const getHiddenListValue = (hiddenInputName) => { const el = modalContent.querySelector(`input[name="${hiddenInputName}"]`); return (el?.value || '').split(',').map(item => item.trim()).filter(Boolean); }; const newData = { ncm: getModalValue('ncm'), descricaoNcm: getModalValue('descricao_ncm'), atributosNcm: getModalValue('atributos_ncm'), infAdProd: getModalValue('descricao_complementar'), descricaoDetalhadaDue: getModalValue('descricao_detalhada_due'), unidadeEstatistica: getModalValue('unidade_estatistica'), quantidadeEstatistica: getModalValue('quantidade_estatistica', true, true), pesoLiquidoItem: getModalValue('peso_liquido', true, true), condicaoVenda: getModalValue('condicao_venda'), vmle: getModalValue('vmle', true, true), vmcv: getModalValue('vmcv', true, true), paisDestino: getModalValue('pais_destino'), enquadramento1: getModalValue('enquadramento1'), enquadramento2: getModalValue('enquadramento2'), enquadramento3: getModalValue('enquadramento3'), enquadramento4: getModalValue('enquadramento4'), lpcos: getHiddenListValue('lpcos'), nfsRefEletronicas: getHiddenListValue('nfsRefEletronicas'), nfsRefFormulario: getHiddenListValue('nfsRefFormulario'), nfsComplementares: getHiddenListValue('nfsComplementares'), ccptCcrom: getModalRadioValue('ccptCcrom') }; Object.assign(itemDataRef, newData); const originalButtonText = saveItemButtonModal.innerHTML; saveItemButtonModal.innerHTML = `<span class="spinner-border spinner-border-sm"></span> Salvando...`; saveItemButtonModal.disabled = true; setTimeout(() => { if (itemDetailsModalInstance) itemDetailsModalInstance.hide(); alert("Dados do item atualizados localmente!"); saveItemButtonModal.innerHTML = originalButtonText; saveItemButtonModal.disabled = false; renderNotasFiscaisTable(); }, 300); } catch (saveErr) { console.error("Erro atualização item:", saveErr); alert(`Erro salvar item: ${saveErr.message}.`); saveItemButtonModal.innerHTML = 'Salvar Alterações do Item'; saveItemButtonModal.disabled = false; }
    });

    // --- Listener Botão Lote (Abrir Modal) ---
    batchEditButton.addEventListener('click', () => { /* ... (código mantido como antes) ... */
        if (processedNFData.length === 0 || processedNFData.every(nf => !nf.items?.length)) { alert("Não há itens."); return; } if (batchEditModalInstance) { batchEditModalInstance.show(); } else { alert("Erro abrir modal lote."); } });

    // --- Listener Salvar Modal Lote ---
    saveBatchButton.addEventListener('click', () => { /* ... (código mantido como antes) ... */
        const batchForm = document.getElementById('batchEditForm'); if (!batchForm || (processedNFData.length === 0 || processedNFData.every(nf => !nf.items?.length)) ) { alert("Form/itens não encontrados."); if (batchEditModalInstance) batchEditModalInstance.hide(); return; } const incotermLote = batchForm.querySelector('#batchIncotermSelect').value; const paisNomeLoteInput = batchForm.querySelector('#batchPaisDestinoInput'); const paisNomeLote = paisNomeLoteInput.value.trim(); let paisCodigoLote = null; if (paisNomeLote && window.paisesData) { const paisEncontrado = window.paisesData.find(p => p.Nome.toLowerCase() === paisNomeLote.toLowerCase()); if (paisEncontrado?.CodigoBACEN) { paisCodigoLote = paisEncontrado.CodigoBACEN; } else { console.warn(`[Edição Lote] País "${paisNomeLote}" não encontrado.`); alert(`Atenção: País "${paisNomeLote}" não encontrado.`); } } const enqsLote = [1, 2, 3, 4].map(i => batchForm.querySelector(`#batchEnquadramento${i}Select`).value); const ccptCcromLote = batchForm.querySelector('input[name="batchCcptCcrom"]:checked').value; let itemsChangedCount = 0; processedNFData.forEach((nfEntry) => { if (nfEntry.items?.length) { nfEntry.items.forEach((item) => { let changed = false; if (incotermLote && item.condicaoVenda !== incotermLote) { item.condicaoVenda = incotermLote; changed = true; } if (paisCodigoLote && item.paisDestino !== paisCodigoLote) { item.paisDestino = paisCodigoLote; changed = true; } enqsLote.forEach((enq, i) => { const key = `enquadramento${i+1}`; if (enq && item[key] !== enq) { item[key] = enq; changed = true; } }); if (ccptCcromLote !== "" && item.ccptCcrom !== ccptCcromLote) { item.ccptCcrom = ccptCcromLote; changed = true; } if (changed) itemsChangedCount++; }); } }); if (batchEditModalInstance) batchEditModalInstance.hide(); renderNotasFiscaisTable(); alert(`${itemsChangedCount} item(ns) atualizados.`); console.log(`[Edição Lote] Concluído. ${itemsChangedCount} itens.`);
    });

    // --- Listener Abas ---
    document.querySelectorAll('#dueTabs .nav-link').forEach(link => { /* ... (código mantido como antes) ... */
        link.addEventListener('shown.bs.tab', event => { /*console.log(`Aba ativada: ${event.target.id}`);*/ }); });


    // --- Listener Botão SALVAR DU-E ---
    if (salvarDueButton) {
        salvarDueButton.addEventListener('click', async () => { /* ... (código mantido como antes, com fetch e logs de debug para nomeCliente) ... */
            console.log("[Salvar DU-E] Iniciando..."); spinner.style.display = 'block'; salvarDueButton.disabled = true; enviarDueButton.disabled = true; const formDataObj = {}; const formDataEntries = new FormData(mainForm); for (const [key, value] of formDataEntries.entries()) { const element = mainForm.elements[key]; if (element?.type === 'checkbox') { formDataObj[key] = element.checked; } else if (element?.type === 'radio') { const checkedRadio = mainForm.querySelector(`input[name="${key}"]:checked`); formDataObj[key] = checkedRadio ? checkedRadio.value : null; } else if(element?.tagName === 'SELECT' && value === '') { formDataObj[key] = null; } else { formDataObj[key] = value.trim() === '' ? null : value; } } formDataObj['due_id'] = dueIdHiddenInput.value || null; const itemsToSave = processedNFData; if (itemsToSave.reduce((count, nf) => count + (nf.items?.length || 0), 0) === 0) { alert("Sem itens."); spinner.style.display = 'none'; salvarDueButton.disabled = false; enviarDueButton.disabled = !dueIdHiddenInput.value; return; } const payload = { formData: formDataObj, itemsData: itemsToSave };
            // Log antes de enviar
            console.log("--- DEBUG JS: Enviando Payload ---"); console.log("Conteúdo formDataObj:", formDataObj); console.log(">>> Especificamente nomeCliente:", formDataObj['nomeCliente']); console.log("--------------------------------------");
            try { /* ... (fetch como antes) ... */ console.log("Enviando..."); const response = await fetch('due/salvar_due.php', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify(payload) }); if (!response.ok) { const errorText = await response.text(); console.error(`Erro HTTP ${response.status}: ${response.statusText}. Resp:`, errorText); alert(`Falha salvar (HTTP ${response.status}). Ver console/logs.`); throw new Error(`HTTP error ${response.status}`); } const result = await response.json(); if (result.success) { console.log("OK:", result); alert(result.message || 'Salvo!'); if (result.due_id) { dueIdHiddenInput.value = result.due_id; console.log(`ID: ${result.due_id}`); document.title = `DU-E: ${result.due_id}`; } if(enviarDueButton) enviarDueButton.disabled = false; } else { console.error("Erro Lógico:", result); alert(`Falha: ${result.message || 'Erro servidor.'}`); if(enviarDueButton) enviarDueButton.disabled = true; } } catch (error) { console.error("Erro fetch/parse:", error); if (!error.message.startsWith('HTTP error')) { alert(`Erro comunicação: ${error.message}.`); } if(enviarDueButton) enviarDueButton.disabled = true; } finally { spinner.style.display = 'none'; salvarDueButton.disabled = false; if(enviarDueButton) enviarDueButton.disabled = !dueIdHiddenInput.value; console.log("[Salvar DU-E] Fim."); }
        });
        console.log("Listener Salvar OK."); // Log confirma adição
    } else { console.error("Botão #salvarDUE não encontrado!"); }


    // --- Listener Botão ENVIAR DU-E ---
    if(enviarDueButton) { /* ... (código mantido como antes) ... */
        enviarDueButton.addEventListener('click', () => { const currentDueId = dueIdHiddenInput.value; if (!currentDueId) { alert("Salve primeiro."); return; } if (confirm(`Enviar DU-E ${currentDueId}?`)) { alert(`ENVIO NÃO IMPLEMENTADO (DU-E: ${currentDueId}).`); console.log("=> API Siscomex aqui."); } }); console.log("Listener Enviar OK.");
    } else { console.error("Botão #enviarDUE não encontrado!"); }

    // --- Estado Inicial dos Botões ---
    const initialItemCount = processedNFData.reduce((count, nf) => count + (nf.items?.length || 0), 0); if(salvarDueButton) salvarDueButton.disabled = initialItemCount === 0; if(enviarDueButton) enviarDueButton.disabled = !dueIdHiddenInput.value; if(batchEditButton) batchEditButton.disabled = initialItemCount === 0;

    console.log("Script principal: Aplicação pronta.");
}); // --- FIM DOMContentLoaded ---